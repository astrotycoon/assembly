From 339ff40d9ef464bf7ac60dd675c3e3327cbc52cc Mon Sep 17 00:00:00 2001
From: Thomas Preud'homme <thomas.preudhomme@celest.fr>
Date: Thu, 24 Jun 2010 20:53:42 +0200
Subject: Add support for indirect functions as externals.

Add link support to use indirect functions defined in external modules.

Origin: vendor
Forwarded: http://lists.nongnu.org/archive/html/tinycc-devel/2010-08/msg00013.html
Last-Update: 2010-10-10
Applied-Upstream: commit: bcc9137a1004682ac58914c7445427cb23ceba88
---
 elf.h    |    1 +
 libtcc.c |    2 +-
 tccelf.c |   12 +++++++-----
 3 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/elf.h b/elf.h
index 82fd7ed..fe694de 100644
--- a/elf.h
+++ b/elf.h
@@ -431,6 +431,7 @@ typedef struct
 #define STT_SECTION     3               /* Symbol associated with a section */
 #define STT_FILE        4               /* Symbol's name is file name */
 #define STT_NUM         5               /* Number of defined types.  */
+#define STT_GNU_IFUNC   10              /* Symbol is a indirect code object */
 #define STT_LOOS        11              /* Start of OS-specific */
 #define STT_HIOS        12              /* End of OS-specific */
 #define STT_LOPROC      13              /* Start of processor-specific */
diff --git a/libtcc.c b/libtcc.c
index add58ac..1cdb4c8 100644
--- a/libtcc.c
+++ b/libtcc.c
@@ -1435,7 +1435,7 @@ static void rt_printline(unsigned long wanted_pc)
             sym < sym_end;
             sym++) {
             type = ELFW(ST_TYPE)(sym->st_info);
-            if (type == STT_FUNC) {
+            if ((type == STT_FUNC) || (type == STT_GNU_IFUNC)) {
                 if (wanted_pc >= sym->st_value &&
                     wanted_pc < sym->st_value + sym->st_size) {
                     pstrcpy(last_func_name, sizeof(last_func_name),
diff --git a/tccelf.c b/tccelf.c
index 956899e..96c641e 100644
--- a/tccelf.c
+++ b/tccelf.c
@@ -1428,9 +1428,10 @@ int elf_output_file(TCCState *s1, const char *filename)
             build_got(s1);
 
             /* scan for undefined symbols and see if they are in the
-               dynamic symbols. If a symbol STT_FUNC is found, then we
-               add it in the PLT. If a symbol STT_OBJECT is found, we
-               add it in the .bss section with a suitable relocation */
+               dynamic symbols. If a symbol STT_FUNC or STT_GNU_IFUNC
+               is found, then we add it in the PLT. If a symbol
+               STT_OBJECT is found, we add it in the .bss section with
+               a suitable relocation */
             sym_end = (ElfW(Sym) *)(symtab_section->data + 
                                     symtab_section->data_offset);
             if (file_type == TCC_OUTPUT_EXE) {
@@ -1443,7 +1444,7 @@ int elf_output_file(TCCState *s1, const char *filename)
                         if (sym_index) {
                             esym = &((ElfW(Sym) *)s1->dynsymtab_section->data)[sym_index];
                             type = ELFW(ST_TYPE)(esym->st_info);
-                            if (type == STT_FUNC) {
+                            if ((type == STT_FUNC) || (type == STT_GNU_IFUNC)) {
                                 put_got_entry(s1, R_JMP_SLOT, esym->st_size, 
                                               ELFW(ST_INFO)(STB_GLOBAL,type), 
                                               sym - (ElfW(Sym) *)symtab_section->data);
@@ -1540,7 +1541,8 @@ int elf_output_file(TCCState *s1, const char *filename)
                     sym++) {
                     if (ELFW(ST_BIND)(sym->st_info) != STB_LOCAL) {
 #if defined(TCC_OUTPUT_DLL_WITH_PLT)
-                        if (ELFW(ST_TYPE)(sym->st_info) == STT_FUNC &&
+                        if ((ELFW(ST_TYPE)(sym->st_info) == STT_FUNC ||
+                            ELFW(ST_TYPE)(sym->st_info) == STT_GNU_IFUNC) &&
                             sym->st_shndx == SHN_UNDEF) {
                             put_got_entry(s1, R_JMP_SLOT, sym->st_size, 
                                           sym->st_info, 
-- 
1.7.5.4

