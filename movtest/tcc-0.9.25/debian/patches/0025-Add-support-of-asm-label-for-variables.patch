From a49102994df5d0c3c0be7fd9440c5a8cd7b33455 Mon Sep 17 00:00:00 2001
From: Thomas Preud'homme <thomas.preudhomme@celest.fr>
Date: Mon, 7 Feb 2011 23:43:18 +0100
Subject: Add support of asm label for variables.

Add support for asm labels for variables, that is the ability to rename
a variable at assembly level with __asm__ ("newname") appended in
its declaration.
See http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Asm-Labels.html for more
details.

Origin: vendor
Forwarded: http://lists.nongnu.org/archive/html/tinycc-devel/2011-02/msg00054.html
Last-Update: 2011-02-09
Applied-Upstream: commit: 11b2d33523d86f915535c2a09b38f3724c4f01cb
---
 libtcc.c |    3 ++-
 tccgen.c |   32 +++++++++++++++++++++++---------
 2 files changed, 25 insertions(+), 10 deletions(-)

diff --git a/libtcc.c b/libtcc.c
index 4202f93..4508f9f 100644
--- a/libtcc.c
+++ b/libtcc.c
@@ -140,7 +140,8 @@ static void decl(int l);
 static void decl_initializer(CType *type, Section *sec, unsigned long c, 
                              int first, int size_only);
 static void decl_initializer_alloc(CType *type, AttributeDef *ad, int r, 
-                                   int has_init, int v, int scope);
+                                   int has_init, int v, char *asm_label,
+                                   int scope);
 int gv(int rc);
 void gv2(int rc1, int rc2);
 void move_reg(int r, int s);
diff --git a/tccgen.c b/tccgen.c
index 03eaf46..65acfee 100644
--- a/tccgen.c
+++ b/tccgen.c
@@ -3092,7 +3092,7 @@ static void unary(void)
         mk_pointer(&type);
         type.t |= VT_ARRAY;
         memset(&ad, 0, sizeof(AttributeDef));
-        decl_initializer_alloc(&type, &ad, VT_CONST, 2, 0, 0);
+        decl_initializer_alloc(&type, &ad, VT_CONST, 2, 0, NULL, 0);
         break;
     case '(':
         next();
@@ -3111,7 +3111,7 @@ static void unary(void)
                 if (!(type.t & VT_ARRAY))
                     r |= lvalue_type(type.t);
                 memset(&ad, 0, sizeof(AttributeDef));
-                decl_initializer_alloc(&type, &ad, r, 1, 0, 0);
+                decl_initializer_alloc(&type, &ad, r, 1, 0, NULL, 0);
             } else {
                 if (sizeof_caller) {
                     vpush(&type);
@@ -4658,12 +4658,14 @@ static void decl_initializer(CType *type, Section *sec, unsigned long c,
 /* parse an initializer for type 't' if 'has_init' is non zero, and
    allocate space in local or global data space ('r' is either
    VT_LOCAL or VT_CONST). If 'v' is non zero, then an associated
-   variable 'v' of scope 'scope' is declared before initializers are
-   parsed. If 'v' is zero, then a reference to the new object is put
-   in the value stack. If 'has_init' is 2, a special parsing is done
-   to handle string constants. */
+   variable 'v' with an associated name represented by 'asm_label' of
+   scope 'scope' is declared before initializers are parsed. If 'v' is
+   zero, then a reference to the new object is put in the value stack.
+   If 'has_init' is 2, a special parsing is done to handle string
+   constants. */
 static void decl_initializer_alloc(CType *type, AttributeDef *ad, int r, 
-                                   int has_init, int v, int scope)
+                                   int has_init, int v, char *asm_label,
+                                   int scope)
 {
     int size, align, addr, data_offset;
     int level;
@@ -4824,6 +4826,7 @@ static void decl_initializer_alloc(CType *type, AttributeDef *ad, int r,
         if (v) {
             if (scope != VT_CONST || !sym) {
                 sym = sym_push(v, type, r | VT_SYM, 0);
+                sym->asm_label = asm_label;
             }
             /* update symbol definition */
             if (sec) {
@@ -5188,10 +5191,20 @@ static void decl(int l)
                     if (gnu_ext && (tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2))
                         parse_attribute((AttributeDef *) &fn->type.ref->r);
                 } else {
+                    char *asm_label; // associated asm label
+
                     /* not lvalue if array */
                     r = 0;
+                    asm_label = NULL;
                     if (!(type.t & VT_ARRAY))
                         r |= lvalue_type(type.t);
+                    if (tok == TOK_ASM1 || tok == TOK_ASM2 || tok == TOK_ASM3) {
+                        CString astr;
+
+                        asm_label_instr(&astr);
+                        asm_label = tcc_strdup(astr.data);
+                        cstr_free(&astr);
+                    }
                     has_init = (tok == '=');
                     if ((btype.t & VT_EXTERN) || 
                         ((type.t & VT_ARRAY) && (type.t & VT_STATIC) &&
@@ -5200,7 +5213,7 @@ static void decl(int l)
                         /* NOTE: as GCC, uninitialized global static
                            arrays of null size are considered as
                            extern */
-                        external_sym(v, &type, r, NULL);
+                        external_sym(v, &type, r, asm_label);
                     } else {
                         type.t |= (btype.t & VT_STATIC); /* Retain "static". */
                         if (type.t & VT_STATIC)
@@ -5210,7 +5223,8 @@ static void decl(int l)
                         if (has_init)
                             next();
                         decl_initializer_alloc(&type, &ad, r, 
-                                               has_init, v, l);
+                                               has_init, v, asm_label,
+                                               l);
                     }
                 }
                 if (tok != ',') {
-- 
1.7.5.4

