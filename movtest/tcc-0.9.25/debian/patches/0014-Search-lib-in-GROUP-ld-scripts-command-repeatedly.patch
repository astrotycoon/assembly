From a4a622eaef983c5c28ad9cdd2f022593d2979018 Mon Sep 17 00:00:00 2001
From: Thomas Preud'homme <thomas.preudhomme@celest.fr>
Date: Mon, 5 Apr 2010 01:54:00 +0200
Subject: Search lib in GROUP ld scripts command repeatedly

Archives specified in the GROUP command in ld scripts are now searched repeatdly
until no new references are created, as required.

Origin: vendor
Forwarded: http://lists.nongnu.org/archive/html/tinycc-devel/2010-04/msg00041.html
Reviewed-by: grischka <grishka@gmx.de>
Last-Update: 2010-04-20
Applied-Upstream: 3ad3168125ecb1910e6e241dc9056bccb57e9d0a
---
 tccelf.c |   71 ++++++++++++++++++++++++++++++++++++++++++++++++-------------
 1 files changed, 56 insertions(+), 15 deletions(-)

diff --git a/tccelf.c b/tccelf.c
index c5e5046..9d66512 100644
--- a/tccelf.c
+++ b/tccelf.c
@@ -30,6 +30,8 @@
 #define REL_SECTION_FMT ".rel%s"
 #endif
 
+static int new_undef_sym = 0; /* Is there a new undefined sym since last new_undef_sym() */
+
 /* XXX: DLL with PLT would only work with x86-64 for now */
 //#define TCC_OUTPUT_DLL_WITH_PLT
 
@@ -250,6 +252,7 @@ static int add_elf_sym(Section *s, unsigned long value, unsigned long size,
         do_patch:
             esym->st_info = ELFW(ST_INFO)(sym_bind, sym_type);
             esym->st_shndx = sh_num;
+            new_undef_sym = 1;
             esym->st_value = value;
             esym->st_size = size;
             esym->st_other = other;
@@ -2793,11 +2796,35 @@ static void libname_to_filename(TCCState *s1, const char libname[], char filenam
     }
 }
 
-static int ld_add_file_list(TCCState *s1, int as_needed)
+static int ld_add_file(TCCState *s1, const char filename[], char libname[])
+{
+    int ret;
+
+    ret = tcc_add_file_internal(s1, filename, 0);
+    if (ret) {
+        if (filename_to_libname(s1, filename, libname))
+            ret = tcc_add_library(s1, libname);
+    }
+    return ret;
+}
+
+static inline int new_undef_syms(void)
+{
+    int ret = 0;
+    ret = new_undef_sym;
+    new_undef_sym = 0;
+    return ret;
+}
+
+static int ld_add_file_list(TCCState *s1, const char *cmd, int as_needed)
 {
     char filename[1024], libname[1024];
-    int t, ret;
+    int t, group, nblibs = 0, ret = 0;
+    char **libs = NULL;
 
+    group = !strcmp(cmd, "GROUP");
+    if (!as_needed)
+        new_undef_syms();
     t = ld_next(s1, filename, sizeof(filename));
     if (t != '(')
         expect("(");
@@ -2806,34 +2833,38 @@ static int ld_add_file_list(TCCState *s1, int as_needed)
         libname[0] = '\0';
         if (t == LD_TOK_EOF) {
             error_noabort("unexpected end of file");
-            return -1;
+            ret = -1;
+            goto lib_parse_error;
         } else if (t == ')') {
             break;
         } else if (t == '-') {
             t = ld_next(s1, filename, sizeof(filename));
             if ((t != LD_TOK_NAME) || (filename[0] != 'l')) {
                 error_noabort("library name expected");
-                return -1;
+                ret = -1;
+                goto lib_parse_error;
             }
             strcpy(libname, &filename[1]);
             libname_to_filename(s1, libname, filename);
         } else if (t != LD_TOK_NAME) {
             error_noabort("filename expected");
-            return -1;
+            ret = -1;
+            goto lib_parse_error;
         } 
         if (!strcmp(filename, "AS_NEEDED")) {
-            ret = ld_add_file_list(s1, 1);
+            ret = ld_add_file_list(s1, cmd, 1);
             if (ret)
-                return ret;
+                goto lib_parse_error;
         } else {
             /* TODO: Implement AS_NEEDED support. Ignore it for now */
             if (!as_needed) {
-                ret = tcc_add_file_internal(s1, filename, 0);
-                if (ret) {
-                    if (filename_to_libname(s1, filename, libname))
-                        ret = tcc_add_library(s1, libname);
-                    if (ret)
-                        return ret;
+                ret = ld_add_file(s1, filename, libname);
+                if (ret)
+                    goto lib_parse_error;
+                if (group) {
+                    /* Add the filename *and* the libname to avoid future conversions */
+                    dynarray_add((void ***) &libs, &nblibs, tcc_strdup(filename));
+                    dynarray_add((void ***) &libs, &nblibs, tcc_strdup(libname));
                 }
             }
         }
@@ -2842,7 +2873,17 @@ static int ld_add_file_list(TCCState *s1, int as_needed)
             t = ld_next(s1, filename, sizeof(filename));
         }
     }
-    return 0;
+    if (group && !as_needed) {
+        while (new_undef_syms()) {
+            int i;
+
+            for (i = 0; i < nblibs; i += 2)
+                ld_add_file(s1, libs[i], libs[i+1]);
+        }
+    }
+lib_parse_error:
+    dynarray_reset(&libs, &nblibs);
+    return ret;
 }
 
 /* interpret a subset of GNU ldscripts to handle the dummy libc.so
@@ -2863,7 +2904,7 @@ static int tcc_load_ldscript(TCCState *s1)
             return -1;
         if (!strcmp(cmd, "INPUT") ||
             !strcmp(cmd, "GROUP")) {
-            ret = ld_add_file_list(s1, 0);
+            ret = ld_add_file_list(s1, cmd, 0);
             if (ret)
                 return ret;
         } else if (!strcmp(cmd, "OUTPUT_FORMAT") ||
-- 
1.7.5.4

